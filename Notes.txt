Java 8

LAMBDA EXPRESSIONS

Three ways to implement an interface:
1. Create an (explicit) class that implements that interface.
        Example:
        class JavaFileFilter implements FileFilter{
            @Override
            public boolean accept(File f) {
                return f.getName().endsWith(".java");
            }
        }

        FileFilter javaFileFilter = new JavaFileFilter();

2. Create an anonymous class
Advantage: Code that filters (in this case) is in the same place as other code
Disadvantage: Code feels cluttered
        Example:
         FileFilter javaFileFilter = new FileFilter(){
             @Override
             public boolean accept(File pathname) {
             return pathname.getName().endsWith(".java");
            }
         };
Lambda expressions make this piece of code more readable, make instances of anonymous classes easier to write

3. Lambda Expressions:
        Example:
        FileFilter javaFileFilter = (File file) -> file.getName().endsWith(".java");

