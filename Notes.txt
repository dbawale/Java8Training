Java 8

LAMBDA EXPRESSIONS

Three ways to implement an interface:
1. Create an (explicit) class that implements that interface.
        Example:
        class JavaFileFilter implements FileFilter{
            @Override
            public boolean accept(File f) {
                return f.getName().endsWith(".java");
            }
        }

        FileFilter javaFileFilter = new JavaFileFilter();

2. Create an anonymous class
Advantage: Code that filters (in this case) is in the same place as other code
Disadvantage: Code feels cluttered
        Example:
         FileFilter javaFileFilter = new FileFilter(){
             @Override
             public boolean accept(File pathname) {
             return pathname.getName().endsWith(".java");
            }
         };
Lambda expressions make this piece of code more readable.

3. Lambda Expressions:
        Example:
        FileFilter javaFileFilter = (File file) -> file.getName().endsWith(".java");
   Use of a lambda function as a higher order function (here the lambda is not assigned to anything explicitly,
   only passed as an argument to a function. The type is inferred automatically)
    Thread t = new Thread(() -> {
               for(int i=0;i<3;i++){
                   System.out.println("Hello world from thread " + Thread.currentThread().getName());
               }
           });
           t.start();
           t.join();

In other words, a lambda expression is another way to provide the implementation of a Functional interface. One
advantage that it gives over explicitly providing implementations is clean code.
It is not necessary to explicitly state the types of the parameters of a lambda expression.  They can be inferred from
the lambda expression. For example:
Collections.sort(list,(s1, s2) -> Integer.compare(s1.length(),s2.length())); can be written instead of
Collections.sort(list,( String s1, String s2) -> Integer.compare(s1.length(),s2.length()));

Three questions about lambdas:
1. What is the type of a lambda expression? Ans: A functional interface. A functional interface is an interface with
only one abstract method. In Java 8, abstract methods are not the only piece of code (apart from constants)
that can be put in an interface definition. The notion of functional interfaces is new in Java 8. In this case,
the methods from the Object class don't count.

2. Can a lambda be put in a variable? Ans: Yes. That way, they can be taken as method parameters and returned by
methods.

3. Is a lambda expression an object? Ans: A lambda expression is created without using <<new>>. The overhead involved
in creating "real" objects is not present while creating lambda expressions. As a result, performance is much better
while using lambda expressions. A lambda expression is not an object (but it's still recorded as an object in the JVM).
It's called "object without it's own identity." You shouldn't call the methods of Object class like toString() or
equals() on a lambda expression.


FUNCTIONAL INTERFACES IN JAVA 8

There are four main categories of functional interfaces in Java 8's java.util.function:
1. Supplier
    @FuntionalInterface
    public interface Supplier<T>{
        T get();
    }

2. Consumer
    @FunctionalInterface
    public interface Consumer<T>{
        void accept(T t);
    }

    @FunctionalInterface
    public interface BiConsumer<T,U>{
        void accept(T t, U u);
    }

3. Predicate
    @FunctionalInterface
    public interface Predicate<T>{
        boolean test(T t);
    }

    @FunctionalInterface
    public interface BiPredicate<T, U>{
        boolean test(T t, U u);
    }

4. Function
    @FunctionalInterface
    public interface Function<T,R>{
        R apply (T t);
    }

    @FunctionalInterface
    public interface BiFunction<T, U, R>{
        R apply(T t, U u);
    }


Default methods in Java 8:
An interface can specify concrete implementations of methods with the 'default' keyword. This can help change existing
interfaces without breaking existing classes that implement them. An example of a default method is the forEach method
in the Iterable interface.


STREAM API

Mapping: Takes a list of a given type and returns a list of another type (with same length)
Filtering: Takes a list of a given type and returns a list of the same type (with different lengths)
Reduction: Equivalent to SQL aggregation, such as sum, max, min, average

Stream: A stream is a typed interface. (So there can be streams of strings, integers, any objects).
A stream gives ways to efficiently process data. A stream is NOT a collection.
A stream object does not hold any data. It should not change the data it processes but this rule is not enforced
anywhere. (A custom implementation of Stream may break this rule but it might lead to issues like data inconsistency
and deadlock)

The map and filter methods can be applied on Streams.
Intermediary methods are methods that take a Stream object and return a Stream object. They are marked so on the
Stream Javadoc. Intermediary methods are just declarations; they are not executed unless a non-intermediary method
is called on a Stream.

Example of a Stream:
List<String> stringList = Arrays.asList("one", "two", "three", "four", "five");
Stream<String> stream = stringList.stream();
        stream
                .filter(Predicate.isEqual("two").or(Predicate.isEqual("three")))
                .forEach(System.out::println);

Reducing:
There are two kinds of reductions included in the Stream API.
1. Aggregation: min, max, sum etc
2.

An identity element is required if the stream is empty. If a stream is empty, then the reduction of that stream
is the identity element.
If a stream has only one element, the reduction of that stream is that element combined with the identity element that's
supplied.

Optional:
Take the example of a 'max' reduction. It may or may not return a value, if the max of that stream is
undefined (as in the case of an empty stream) then it may return null. In that case, the programmer will have to take
care to check for null pointer exceptions (which is a pain point). A better way is to return an object of the
Optional<T> type. Returning an optional means there may or may not be any result.
The Optional class is a wrapper class, much like Integer or Boolean.
Another way to think about the Optional class is it converts a run-time null pointer exception into a compile time
error. That is, your code won't compile if the compiler expects a type of Optional and you forget to return one.
Similarly while reading a value from an optional, it is imperative to use the get() method or else the code won't
compile.
For example, a max operation on a stream cannot be applied to an Integer directly, it has to return an Optional<Integer>
and the compiler will enforce this.

